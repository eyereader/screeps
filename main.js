require('prototype.spawn') ();var roleHarvester = require('role.harvester');var roleUpgrader = require('role.upgrader');var roleBuilder = require('role.builder');var roleFixer = require('role.fixer');var roleWallFixer = require('role.wallFixer');var roleMiner = require('role.miner');var roleCarrier = require('role.carrier');var roleLongDistanceHarvester = require('role.longDistanceHarvester');var HOME = 'E1N36'; module.exports.loop = function() {        for (var name in Game.creeps) {            var creep = Game.creeps[name];            if (creep.memory.role == 'harvester') {                roleHarvester.run(creep);            }            if (creep.memory.role == 'upgrader') {                roleUpgrader.run(creep);            }            if (creep.memory.role == 'builder') {                roleBuilder.run(creep);            }            if (creep.memory.role == 'fixer') {                roleFixer.run(creep);            }            if (creep.memory.role == 'wallFixer') {                roleWallFixer.run(creep);            }            if (creep.memory.role == 'miner') {                roleMiner.run(creep);            }            if (creep.memory.role == 'carrier') {                roleCarrier.run(creep);            }             if (creep.memory.role == 'longDistanceHarvester') {                roleLongDistanceHarvester.run(creep);            }        }    var towers = _.filter(Game.structures, s => s.structureType == STRUCTURE_TOWER);    for (let tower of towers) {        var target = tower.pos.findClosestByRange(FIND_HOSTILE_CREEPS);        if (target) {            tower.attack(target);        }/*        if (tower.energy > (tower.energyCapacity * 0.8)) {            var ramparts = tower.room.find(FIND_STRUCTURES, {                filter: s => (s.structureType == STRUCTURE_RAMPART)            });            target = undefined;            for (let pct = 0.0001; pct <= 1; pct += 0.0001){                for (let rampart of ramparts) {                    if (rampart.hits / rampart.hitsMax < pct) {                        target = rampart;                        break;                    }                }                if (target) {                    break;                }            }            if (target) {                tower.repair(target);                 }        }    */    }    for (var name in Memory.creeps) {        if (!Game.creeps[name]) {            delete Memory.creeps[name];            console.log('Clearing non-existing creep memory:', name);        }    }    for (let spawnName in Game.spawns) {        let spawn = Game.spawns[spawnName];        let creepsInRoom = spawn.room.find(FIND_CREEPS);        var numFixers = _.sum(creepsInRoom, (creep) => creep.memory.role == 'fixer');        var numBuilders = _.sum(creepsInRoom, (creep) => creep.memory.role == 'builder');        var numUpgraders = _.sum(creepsInRoom, (creep) => creep.memory.role == 'upgrader');        var numHarvesters = _.sum(creepsInRoom, (creep) => creep.memory.role == 'harvester');        var numWallFixers = _.sum(creepsInRoom, (creep) => creep.memory.role == 'wallFixer');        var numMiners = _.sum(creepsInRoom, (creep) => creep.memory.role == 'miner');        var numCarriers = _.sum(creepsInRoom, (creep) => creep.memory.role == 'carrier');        var numLongDistanceHarvesters = _.sum(Game.creeps, (creep) => creep.memory.role == 'longDistanceHarvester');        var energy = spawn.room.energyCapacityAvailable;        var name = undefined;        let sources = spawn.room.find(FIND_SOURCES);        for (let source of sources) {            if (!_.some(creepsInRoom, c => c.memory.role == 'miner' && c.memory.sourceId == source.id)) {                let containers = source.pos.findInRange(FIND_STRUCTURES, 1, {                    filter: s => s.structureType == STRUCTURE_CONTAINER                });                if (containers.length > 0) {                    name = spawn.spawnMiner(source.id);                    break;                }            }        }        if (numHarvesters == 0 && (numMiners == 0 || numCarriers == 0)) {            if (numMiners > 0) {                name = spawn.spawnCarrier(300);            } else {                name = spawn.spawnCustomCreep(200, 'harvester');            }        }        if (name == undefined) {            if (numHarvesters < spawn.memory.minHarvesters) {                if (spawn.spawnCustomCreep(energy, 'harvester') >= 0) {                    console.log('Spawning new harvester');                }            } else if (numLongDistanceHarvesters < spawn.memory.minLongDistanceHarvesters) {                if (spawn.spawnLongDistanceHarvester(energy, 4, HOME, 'E1N37', 0) >= 0) {                    console.log('Spawning new long distance harvester');                }             } else if (numUpgraders < spawn.memory.minUpgraders) {                if (spawn.spawnCustomCreep(energy, 'upgrader') >= 0) {                    console.log('Spawning new upgrader');                }            } else if (numBuilders < spawn.memory.minBuilders) {                if (spawn.spawnCustomCreep(energy, 'builder') >= 0) {                    console.log('Spawning new builder');                }            } else if (numFixers < spawn.memory.minFixers) {                if (spawn.spawnCustomCreep(energy, 'fixer') >= 0) {                            console.log('Spawning new fixer');                }            } else if (numWallFixers < spawn.memory.minWallFixers) {                if (spawn.spawnCustomCreep(energy, 'wallFixer') >= 0) {                           console.log('Spawning new wall fixer');                }            } else if (numCarriers < spawn.memory.minCarriers) {                if (spawn.spawnCarrier(300) >= 0) {                           console.log('Spawning new carrier');                }            }        }        if (spawn.spawning) {            var spawningCreep = Game.creeps[spawn.spawning.name];            spawn.room.visual.text('ðŸ› ' + spawningCreep.memory.role,                spawn.pos.x + 1,                spawn.pos.y, { align: 'left', opacity: 0.8 });        }        if (!(Game.time%5)) {            console.log('H:' + numHarvesters + '/' + spawn.memory.minHarvesters +                '  L:' + numLongDistanceHarvesters + '/' + spawn.memory.minLongDistanceHarvesters +                '  U:' + numUpgraders + '/' + spawn.memory.minUpgraders +                '  B:' + numBuilders + '/' + spawn.memory.minBuilders +                '  F:' + numFixers + '/' + spawn.memory.minFixers +                '  W:' + numWallFixers + '/' + spawn.memory.minWallFixers +                '  M:' + numMiners +                '  C:' + numCarriers + '/' + spawn.memory.minCarriers +                '  energy:' + spawn.room.energyAvailable +                '  sources:' + _.sum(spawn.room.find(FIND_SOURCES), (s) => s.energy) +                 '  maxEnergy:' + energy);        }    }};